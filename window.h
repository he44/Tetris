#include <SFML/Graphics.hpp>
#include <iostream>
using namespace std;

int window_trial();
int open_window();

/*	Notes on Events	*/
/*
1. 	sf::Event is a union --> only one of its members can be true at a time
2.	sf::Event are filled by pollEvent/waitEvent
3.	Following is the common way taking care of events
*/

// sf::Event event;
// // while there are pending events...
// while (window.pollEvent(event))
// {
//     // check the type of the event...
//     switch (event.type)
//     {
//         // window closed
//         case sf::Event::Closed:
//             window.close();
//             break;

//         // key pressed
//         case sf::Event::KeyPressed:
//             ...
//             break;

//         // we don't process other types of events
//         default:
//             break;
//     }
// }

/*	Event Types  */
/*
=================	window	=================
1.	Closed event 
	triggered when user tries to close the window
	The window is not closed yet at this point. 
	Can choose to save window status, ask for further information from the user,
	or call window.close() directly
2.	Resized event
	triggered when window is resized (user/code)
	window.setSize()
	event.size.width
	event.size.height
3.	LostFocus/GainedFocus event
	triggered when the window loses/gains focus
	user switches active window --> out of focus --> won't receive key strokes
	Can choose to pause when focus is lost

=================	Keyboard	=================
4.	TextEntered event
	triggered when a character is typed
	produces the appropriate character (Shift + a gives A)
	if (event.text.unicode< 128){	
		char = (char)event.text.unicode;
	}
	Non-printable chars(backspace) generated by this event
5.	KeyPressed/KeyReleased event
	triggered when a keyboard key is pressed/released
	key held --> repeated KeyPressed events
	can be disabled: window.setKeyRepeatEnabled(false)
	keyReleased can never be repeated
	to get smooth reacton: get a flag set after pressed, and cleared after 
	released
	event.key
	if (event.type == sf::Event::KeyPressed){
	    if (event.key.code == sf::Keyboard::Escape){
	        std::cout << "the escape key was pressed" << std::endl;
	        std::cout << "control:" << event.key.control << std::endl;
	        std::cout << "alt:" << event.key.alt << std::endl;
	        std::cout << "shift:" << event.key.shift << std::endl;
	        std::cout << "system:" << event.key.system << std::endl;
	    }
	}	
6.	MouseWheelMoved event
	triggered when a mouse wheel moves up/down
	if (event.type == sf::Event::MouseWheelScrolled){
	    if (event.mouseWheelScroll.wheel == sf::Mouse::VerticalWheel)
	        std::cout << "wheel type: vertical" << std::endl;
	    else if (event.mouseWheelScroll.wheel == sf::Mouse::HorizontalWheel)
	        std::cout << "wheel type: horizontal" << std::endl;
	    else
	        std::cout << "wheel type: unknown" << std::endl;
	    std::cout << "wheel movement: " << event.mouseWheelScroll.delta << std::endl;
	    std::cout << "mouse x: " << event.mouseWheelScroll.x << std::endl;
	    std::cout << "mouse y: " << event.mouseWheelScroll.y << std::endl;
	}
7.	MouseButtonPressed/MouseButtonReleased event
	triggered when a mouse button is pressed/released
	Right/Left/Middle/Extra 1/Extra 2
	if (event.type == sf::Event::MouseButtonPressed){
	    if (event.mouseButton.button == sf::Mouse::Right){
	        std::cout << "the right button was pressed" << std::endl;
	        std::cout << "mouse x: " << event.mouseButton.x << std::endl;
	        std::cout << "mouse y: " << event.mouseButton.y << std::endl;
	    }
	}
8.	MouseMoved event
	triggered when the mouse moved in the window
	event.mouseMove.x -- current mouse position x
	event.mouseMove.y -- current mouse position y
9.	MouseEntered MouseLeft event
	triggered when mouse cursoe enters/leaves the window

=================	Joy Stick	=================	

*/




















